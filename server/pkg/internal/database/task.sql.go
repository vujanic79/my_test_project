// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: task.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createTask = `-- name: CreateTask :one
INSERT INTO task(id, created_at, updated_at, title, description, status, complete_deadline, user_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, created_at, updated_at, title, description, status, complete_deadline, user_id
`

type CreateTaskParams struct {
	ID               uuid.UUID
	CreatedAt        time.Time
	UpdatedAt        time.Time
	Title            string
	Description      string
	Status           string
	CompleteDeadline time.Time
	UserID           uuid.UUID
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.CompleteDeadline,
		arg.UserID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CompleteDeadline,
		&i.UserID,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM task t
WHERE t.id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getTasksByUserId = `-- name: GetTasksByUserId :many
 SELECT id, created_at, updated_at, title, description, status, complete_deadline, user_id FROM task t
 WHERE t.user_id = $1
`

func (q *Queries) GetTasksByUserId(ctx context.Context, userID uuid.UUID) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.CompleteDeadline,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE task SET title = $2, description = $3, status = $4, complete_deadline = $5
WHERE id = $1
RETURNING id, created_at, updated_at, title, description, status, complete_deadline, user_id
`

type UpdateTaskParams struct {
	ID               uuid.UUID
	Title            string
	Description      string
	Status           string
	CompleteDeadline time.Time
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.CompleteDeadline,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CompleteDeadline,
		&i.UserID,
	)
	return i, err
}
