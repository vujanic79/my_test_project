// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: task_status.sql

package database

import (
	"context"
)

const createTaskStatus = `-- name: CreateTaskStatus :one
INSERT INTO task_status (status)
VALUES ($1)
RETURNING status
`

func (q *Queries) CreateTaskStatus(ctx context.Context, status string) (string, error) {
	row := q.db.QueryRowContext(ctx, createTaskStatus, status)
	err := row.Scan(&status)
	return status, err
}

const getTaskStatusByStatus = `-- name: GetTaskStatusByStatus :one
SELECT status FROM task_status ts
WHERE ts.status = $1
`

func (q *Queries) GetTaskStatusByStatus(ctx context.Context, status string) (string, error) {
	row := q.db.QueryRowContext(ctx, getTaskStatusByStatus, status)
	err := row.Scan(&status)
	return status, err
}

const getTaskStatuses = `-- name: GetTaskStatuses :many
SELECT status FROM task_status
`

func (q *Queries) GetTaskStatuses(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getTaskStatuses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var status string
		if err := rows.Scan(&status); err != nil {
			return nil, err
		}
		items = append(items, status)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
